# agents/image_agent.py
"""
Image Generation Agent using Google Gemini API
- Inherits from BaseAgent for common functionality
- Specialized for image generation using Imagen
"""

import base64
import os
from typing import Dict, Any
from .base_agent import BaseAgent

class ImageAgent(BaseAgent):
    """
    Image Generation Agent using Gemini Imagen
    """
    
    def __init__(self):
        super().__init__(agent_type="image_generation_specialist")
        self.image_model = os.getenv('IMAGEN_MODEL_NAME', 'imagen-3.0-generate-002')
    
    def generate_image(self, prompt: str, aspect_ratio: str = "16:9", style: str = "professional") -> Dict[str, Any]:
        """
        Generate an image using Gemini Imagen.
        
        Args:
            prompt: Detailed description of the image to generate
            aspect_ratio: Image aspect ratio (16:9, 1:1, 9:16)
            style: Visual style preference (professional, artistic, photographic, etc.)
            
        Returns:
            Dict containing image data, metadata, and generation details
        """
        try:
            from google.genai import types
            
            # Create enhanced prompt
            enhanced_prompt = self._enhance_prompt(prompt, style)
            
            # Generate image using Imagen
            response = self.gemini_client.models.generate_images(
                model=self.image_model,
                prompt=enhanced_prompt,
                config=types.GenerateImagesConfig(
                    number_of_images=1,
                    aspect_ratio=aspect_ratio
                )
            )
            
            if response.generated_images:
                image_bytes = response.generated_images[0].image.image_bytes
                image_b64 = base64.b64encode(image_bytes).decode('utf-8')
                
                return self.create_success_response(
                    image_id=self.generate_unique_id(),
                    image_data=image_b64,
                    image_format="png",
                    image_size=len(image_bytes),
                    prompt={
                        "original": prompt,
                        "enhanced": enhanced_prompt,
                        "style": style
                    },
                    parameters={
                        "aspect_ratio": aspect_ratio,
                        "model": self.image_model
                    }
                )
            else:
                raise ValueError("No images generated by Imagen")
                
        except Exception as e:
            return self.create_error_response(str(e), "image_generation_error")
    
    def enhance_prompt(self, basic_prompt: str, enhancement_type: str = "detailed") -> Dict[str, Any]:
        """
        Enhance a basic prompt for better image generation.
        
        Args:
            basic_prompt: Basic image description
            enhancement_type: Type of enhancement (detailed, artistic, photographic)
            
        Returns:
            Dict containing enhanced prompt
        """
        enhanced_prompt = self._enhance_prompt(basic_prompt, enhancement_type)
        return {
            "original_prompt": basic_prompt,
            "enhanced_prompt": enhanced_prompt,
            "enhancement_type": enhancement_type
        }
    
    def _enhance_prompt(self, basic_prompt: str, style: str = "professional") -> str:
        """Enhance a basic prompt for better image generation."""
        style_enhancements = {
            "professional": "professional, high-quality, clean composition, corporate style, well-lit",
            "artistic": "artistic, creative, expressive, unique perspective, dynamic composition",
            "photographic": "photographic, realistic, detailed, sharp focus, natural lighting",
            "minimalist": "minimalist, clean, simple, uncluttered, modern design",
            "vintage": "vintage, retro, classic style, warm tones, nostalgic feel"
        }
        
        enhancement = style_enhancements.get(style, style_enhancements["professional"])
        return f"{enhancement}, {basic_prompt}, high resolution, detailed, visually appealing"
    
    def _get_prompt_suggestions(self, prompt: str) -> list:
        """Get suggestions for improving the prompt."""
        return [
            "Consider adding lighting details (natural light, studio lighting, golden hour)",
            "Specify the mood or atmosphere (calm, energetic, mysterious, cheerful)",
            "Include composition details (close-up, wide shot, bird's eye view)"
        ][:3]
    
    def get_agent_info(self) -> Dict[str, Any]:
        """Get information about this agent."""
        return {
            "name": "Image Generation Specialist",
            "type": "image_generation",
            "model": self.image_model,
            "capabilities": ["generate_image", "enhance_prompt"],
            "status": "ready" if self.gemini_client else "not_ready"
        }